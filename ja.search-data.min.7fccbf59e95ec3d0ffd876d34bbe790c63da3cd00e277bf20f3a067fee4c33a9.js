'use strict';(function(){const indexCfg={encode:false,tokenize:function(str){return[...new Set(str.toLowerCase().match(/[一-龠]+|[ァ-ヴー]+|[a-z0-9]+/g).filter(word=>word.length>1).map(word=>{if(word.match(/[a-z0-9]+/g)){let token=''
return Array.from(word).map(char=>(token+=char)).filter(token=>token.length>1)}else{return word}}).flat()),];}};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/ec/','title':"EC",'section':"自社ECの仕様を学ぼう",'content':"EC #  自社ECを取り巻く要素 #  事業者(自社EC運営者)がオンラインで販売を行い、顧客が決済し、指定の配送先に商品を送る、もしくはサービスを提供する一連のやり取りをEC(Electric Commerce)と呼ぶ。上記の前段階(集客やマーケティング)、注文を受け付けるECサイト、受注後ユーザーに商品が届くまでの段階も含めて業務範囲は日々大きくなっている。 主要な要素とその連携を検討し、それぞれの仕様を詰めることによって、安定した質の良いECサイトを作る事が可能であるとともに全体的な事業改善、業務改善を行うことが可能である。\n 導線 #  ECサイトへの導線はメールであったり、広告であったり、コンテンツであったり多様になっている。ここでは主要なものを紹介する。\nマーケティングツール #  顧客とコミュニケーションし、ECサイトに呼ぶためのツールをマーケティングツールと総称する。 昨今では、チャット、かご落ちツール(カートに入れたまま購入しなかったユーザーのフォローツール)、 ステップメール(顧客を未購入者、初回購入者、常連など段階化してメールを送る)などがよく使われている。 顧客リストを持つCRMと連携して、機能することが多い。\nメールマガジン #  マーケティングツールに含んでよいものだが、ECサイトではメールマガジンは効果が出やすく、ここでは別途切り出した。 実際にはマーケティングツール同様にCRM(Customer Relationship Management※後述)と連携し、全ユーザーに一括であったり、顧客をセグメント分け(年齢、男女、地域、購入回数、購入カテゴリ)してリスト抽出し、メールを送る。\nコンテンツマーケティング #  オウンドメディア※のように企業がブログや企業サイトを通じて魅力的なコンテンツを発信しECサイトに勧誘する導線。 実際にはCMS(Content Management System※後述)やブログツールのようなものを用いて、情報発信する。情報リテラシーの低い社員でも情報を発信しやすくしたり、口コミを集めやすくするなど、力量次第でいかようにも伸ばすことが出来る。\nSEO #  検索結果の上位にいることは強いECサイトを運営するために必要不可欠である。 Googleにインデックスされやすくする技術的なこと(タグの作法、正しい構造化)と、競合他社に勝つために、どのキーワードを強化するか、その為のコンテンツ拡充などの対策が必要となる。Googleのサーチコンソールだったり、アナリティクスに関する知見が求められる。\nSNS #  Twitter,Facebook,Instagram,LINEなどのSNSツールから自社ECへの導線を確立している企業は、固定的なファンがついているという意味合いでも強い。SNSはユーザー層や商品の特性に応じて使い分ける形となる。製品のファンになってもらい継続的な双方向コミュニケーションをとるにはFacebookが適している。匿名的な嗜好を求める場合は、Twitterが効果的だったり、若い女性向けとなるとInstagramなど写真に特化したSNSが適している。若い女性にとってはファッション誌代わりにInstagramを活用しているなど、時代とともに使い方が変わっていく傾向がある。\n広告 #  Googleの検索結果に表示されるテキスト広告やGoogleショッピングなど、強化するキーワードを決めて効果的にPDCAを回しながら運用していくことが求められる。特に駆け出しのECサイトは認知度に劣るため早い段階から少額でも始めることが望ましい。 また、CriteoのようなDSP(Demand Side Platform＝広告枠を提供するプラットフォーム)を使って、Yahooのトップにリターゲティング広告をユーザーの閲覧履歴、趣向別に出すことも可能になっており、個人別に最適化された広告というものが伸びていく傾向にある。\nECサイト #  実際に商品を売るのはECサイトとなるが、いくつかの主要な構成要素があるので説明する。\nレコメンド #  商品点数が多かったり、関連商品の提示や、あわせ買いを促進したい場合、レコメンド機能を利用する。 ユーザーの閲覧履歴や購入履歴と連携して動的にレコメンドするようなケースは、ツールもしくはAI的なサービスの導入を検討することが多い。ある商品を購入する際に関連して買うものが概ね決まっている場合は、運営側で関連商品として静的にECサイトで設定することが多い。\n検索 #  商品点数が数千点、数万点など多い場合、検索機能の良しあしでサイトの使い勝手が決まる。検索を強化するためには、検索専用のサービスを別途導入することが多い。話題となる機能の一つにファセットがあり、カテゴリ別に切り口とその件数が表示されドリルダウンしていくことが出来たり、レビュースコア別の切り口でグルーピングしたり、価格帯でグルーピングしたりなど使い勝手を高めることが可能である。その他だと入力キーワードとのマッチがあるが、自社製品の特長に合わせた辞書が必要であったり、タイプミスした言葉をどこまでフォローできるかなど、突き詰めていくと必要な機能は尽きない。 ツールに頼らないやり方だと、商品に付随してマッチさせる検索キーワードを地道に充実させていくことも重要である。\n決済 #  クレジットカード、銀行振込、後払い、携帯電話キャリア決済、Amazonペイ、楽天ペイ、LINEペイ、Appleペイ、PayPal、ペイジー、ビットコインなど支払い方法の多様化が進んでいる。入金方法が増えるのは便利な反面、確認方法は多様化するので、バックオフィスで働くメンバーの行効率なども踏まえて選択していくことになる。\n自社EC #  自社ECサイト。オープンソースでの構築、パッケージを購入しての構築、クラウドサービスを利用しての構築、完全スクラッチなどの手法があるが、それぞれ得手不得手があるので自社に合った方法を選択するように心がけたい。\nモール #  楽天、Amazon、Yahoo他、モールに商品を供給することは販路の拡大として効果が大きい。一方、自社サイトを含めてどこで売れようと在庫の管理、注文～出荷までの業務を統合する必要が出てくる。後述するBackOfficeやWMSでまとめて対応する事が一般的となる。\nEC業務 #  コールセンター #  IVR(Interactive Voice Response System※)を使って、電話番号をもとに顧客情報を引き出すような連携をする場合がある。 顧客の問い合わせを受けるには、顧客の情報(個人情報、注文履歴、問い合わせ履歴、FAQ、基幹システムの情報、顧客に代わってEC注文を行ったり、キャンセルする機能)等を組み合わせる必要がある。\n会員サポート #  コールセンター同様に、顧客に関する情報を閲覧しながら会員のサポートを行う。 顧客の問い合わせを元にFAQを作るサービスもあり、人的な対応を減らしていくことも重要な業務となる。\n運用支援 #  広告の運用、商品情報の作成(写真撮影)など時間を要する業務は運用支援を行う企業にアウトソースすることも多い。\nBackOffice #  注文管理、商品管理、顧客管理、などECサイトを運用するための一連の業務を行うものを、ここでは総称としてBackOfficeと呼ぶ。業態によって追加の業務が存在する。例えば発注管理まで含んでいたり、デジタルコンテンツの場合はライセンス管理したり、原価管理したりなど。\nBI・データ分析 #  BI(Business Intelligence)を利用してデータ分析を行う。結果として社内共有されるようなレポートが求められる。 アクセス、広告の効果測定、コンバージョン、顧客の各種属性(地域、年齢、性別)、購入商品など多岐にわたる。\n基幹業務、物流 #  会員カード・ポイント #  後述するPOSや基幹システムの機能を用いて、会員証の表示であったり、会員証やIDと連携してポイント機能を提供する。 会員証はiOSやAndoridのネイティブアプリ内に表示することが一般的になっている。\nCRM #  CRM(Customer Relationship Management)は顧客との関係を管理する機能を提供する。顧客との関係を親密にしたり、継続して購入や利用を続けてくれる関係を構築する。顧客管理という基本機能を元に、セグメント分けした対象を抽出してメールを送ったり、顧客の要望を吸い上げたりなど、する機能がある。\nWMS #  WMS(Warehouse Managiment System)は倉庫管理システムとして在庫の管理、出荷の管理などを行う。 入荷予定の管理、入荷処理、在庫を管理している棚やロケーションの管理、出荷管理(ピッキングリスト)、棚卸管理、スキャンする端末等の機能を提供する。\nPOS #  POS(Point Of Sale)は、店舗で利用されるレジ端末。商品の価格、数量、値引きであったり、在庫管理、顧客の会員カードにポイントを付与するなどの機能がある。店舗を持つ企業がECを行う場合、O2O(Online to Offline)的な観点から、POSに付随する会員情報、購買情報、ポイント情報をEC側と連携することが顧客満足度を高める有効な手段となっている。\n基幹システム連携 #  基幹システム連携については、以下で後述する。\n  基幹システム連携  越境 #  越境については日本から送るのか、現地拠点から送るのかで異なる。\n配送 #  配送については、\n 商品が在庫品であるか調達するかでリードタイムが異なり 複数の商品がある場合、まとめてから送付するか どの配送業者から配送するか で配送日や送料が異なる。  発注 #  卸やメーカーに対して、自社倉庫にない商品を発注する。卸やメーカーから直送するか、自社倉庫に一度集めるかなど違いがある。 また、発注形態としてEDIもしくはFAX(自動FAX)、メール(自動メール)など業界の慣習によって異なる。 発注タイミングも日に一度や、一定量必要になってから発注など業務にあわせた制御が求められる。\n会計 #  会計システムとの連携は、売上情報を連携するというシンプルなケースが大半。\n外部リソース #  配送業者 #  クロネコヤマトや佐川、もしくは自社で持っている配送サービスなどが一般的となる。\n卸・メーカー #  卸やメーカーに対して、自社倉庫にない商品を発注する。卸やメーカーから直送するか、自社倉庫に一度集めるかなど違いがある。 また、発注形態としてEDIもしくはFAX(自動FAX)、メール(自動メール)など業界の慣習によって異なる。\n工場 #  自社工場や生産管理系の機能に対して、発注をかける。発注後、倉庫に入荷することになるわけだが、倉庫とのやり取りに関しては、入荷予定、検品用のバーコードが重要となる。\n用語 #    CRM  オウンドメディア  CMS  IVR  "});index.add({'id':1,'href':'/ecbusiness/','title':"ECの多様な事業形態",'section':"自社ECの仕様を学ぼう",'content':"ECの多様な事業形態 #  ECには以下のように多数の事業形態が存在する。\n取引相手 #   BtoB(企業間) BtoC(企業から一般消費者) CtoC(消費者から消費者)  取引対象 #   物販(アパレル、家具、雑貨、日用品、家電、書籍) 資材 デジタルコンテンツの販売  "});index.add({'id':2,'href':'/systemload/','title':"システム負荷対策",'section':"自社ECの仕様を学ぼう",'content':"システム負荷対策 #  システム負荷対策は多様な方法で行うことが出来るため、まずは一般的な内容を記載する。 ここにはない独自の対応をしている場合は、是非ご指摘頂きたい。\n前提 #   前提としてアプリケーション側でパフォーマンスの悪いクエリや処理を確認して最適化、DBにインデックスをはる等のパフォーマンスチューニング、適切なコーディングが出来ていること。 システム負荷対策において、単にサーバー台数を増やすということは、チューニング出来ていない不完全なインフラを拡張することになり不利益が大きいので、アプリケーションが最適化されていることが前提となる。 個人的な思いになるが、コンピューティングリソースは大切に、水筒にたまった水を無駄にしないように大切に使っていきたい。  計測＝何がボトルネックになっているのか #   システム負荷対策として、まず何がボトルネックになっているのか計測する必要がある。 計測は、負荷問題が起きてからではなく、日常的に計測していく必要がある。 日常的な計測は、CPU負荷であったり、メモリの使用量、１受注当たりの速度等指標のロギングと、処理速度の閾値を超えた場合にアラート通知が求められる。 一般的にシステムは構築後、劣化していくので、機能を追加するだけではなく、パフォーマンスを維持する事も重要な運用業務である。 一般的なボトルネックは、WEBサーバー、DBサーバー、ネットワーク、外部連携部分(例えば決済代行との連携)のケースがある。 またボトルネックは、ECサイトの状況(PV増、トランザクション増、データ量増)によって問題個所が移動していくので、終わりなき探求である。 本稿では計測部分は別途記載する(TODO)のでECシステムで基本的に採用されているシステム負荷対策を紹介する。 システム負荷対策には、システムアーキテクチャで対応する事と、プログラミングで対応する事があり、それぞれ説明する。  システムアーキテクチャで対応する場合の基本指針 #   システムは事業の成長過程に応じて、増強していくことが出来る必要がある。(最初から必要以上の構成は不要である。) システム負荷対策にはスケールアップとスケールアウトの方式がある。    スケールアップとは当該システムのCPUやメモリなどのスペックを上げることで、スケールアウトは水平にサーバーを足していくこと。 一般的にWEBサーバーは水平にスケールアウトがしやすく、データベースなどはスケールアップして対応するケースが多い。※ソーシャルゲームの場合はシャーディングという形をとって、データベースサーバーを水平に足していくやり方がある。 上記が一般的なシステム負荷対処であるが、ECシステム負荷対策の基本方針として、オリジンサーバー(購入時の受注等ECのコア業務が行われるサーバー)への負荷を減らすことが重要。    オリジンサーバーへの負荷を減らすために、キャッシュの多用やサービス分割を行っていく。 キャッシュはシステム上の複数の層で行うことが出来る。(後述) サービス分割とは、検索やレコメンドのサービスを別に切り出したり、通販基幹システムをECフロントとは別にしたりすることである。 他にも使用するプロトコルなどでシステム負荷は変わるので、対応する必要がある。  キャッシュ #   CDN(Contents Delivery Network)、WEBサーバーでのキャッシュ、DBサーバーでのキャッシュ、クライアントでのキャッシュなどキャッシュ可能な場所は多岐にわたる。  CDN(Contents Delivery Network) #   リクエストに対するレスポンスを単一のサーバーから配信すると当然負荷が高まる。 CDNとはContents Delivery Network で大規模な配信サーバー群、外部のサーバーからコンテンツ配信を行うため、オリジンサーバーへの負荷を減らすことが出来る。 具体的には商品の画像を中心としたメディアをCDNから配信することが出来る。 HTML自体もCDNにキャッシュすることが出来る仕様にすれば、よりオリジンサーバーへの負荷を減らすことが出来る。 キャッシュ効率を上げる設定の考慮。(URLに付加する検索クエリパラメータの調整) Google bot やその他botのクロールによる大量アクセスがあっても問題がなくなる。 CDNはCloudfrare、Fastly、Cloudfront、Akamai、KeyCDN、Stackpath, Verizonなど複数社が提供している。 付加機能としてWAF(Web Application Firewall)やその他有用なネットワーク機能を提供するCDNサービスがあるので、価格など含めて検討する。 キャッシュするメディアの容量によっては高額になるので、商品画像などの軽量化や最適化をきちんと行ったうえで利用する。 N時スタートのセールでちょうどキャッシュをパージするなど、そういった  WEBサーバー上でのキャッシュ(TODO) #   WEBサーバー上で特定の実行結果をメモリにキャッシュする。  DBでのキャッシュ(TODO) #   特定の情報をDB上にキャッシュする。  クライアントでのキャッシュ(TODO) #   サーバーからHTTPステータスコードの304レスポンスを受け取ると、ブラウザはローカルのキャッシュを利用し、サーバーへの通信が削減される。 HTML5のServiceWorkerは、ブラウザのメインスレッドとは別に動くワーカーで、コンテンツキャッシュや同期処理などを行う。ブラウザのストレージ内にデータをキャッシュすることが出来、高速化をはかることができる。  サービス分割で対応すること #  検索 #   商品情報を検索するのは負荷が非常に高い。商品点数が増えるほどに高くなる。 よって、検索自体を別サーバーや別サービス(以降検索サービスと呼びます)で行い、EC機能(購入のトランザクション)とは別にする。 よくある例としては、商品情報を特定のタイミング(数時間単位か、数分単位)か、検索サービス(ASP)に全件送るケースが多い。 商品の全件取得は、件数やデータ構造によっては負荷が高いので、注意する。 検索サービスとECを切り離すと、商品情報や在庫情報の連携(商品追加や価格をはじめとした商品情報の変更、在庫の変更)にタイムラグが生まれる。タイムラグを考慮した仕様、画面仕様にすること。  ECのフロントエンドも閲覧系と購入フロー(カート)のサーバーを分ける #   ECのフロントエンドも、トランザクション(購入や会員登録)が発生するものと、閲覧が中心でトランザクションがないもの(TOP、カテゴリTOP、商品詳細)にわけることができる。  ECのフロントエンドとEC基幹システムを別にする #   管理側で受注情報や商品情報の大量ダウンロードや更新を行うと、フロントサイトのパフォーマンス自体に影響を及ぼすことがある。 ECのフロントエンドとEC基幹システムを別にする(データベースを別にする)と、バックエンドの業務がフロントエンドに負荷を与えるようなことがなくなる。  メール送信サービスを利用する #   メール送信については、メルマガを中心にシステム負荷となるケースが多い。 SendGridなど外部サービスを積極的に利用して良い分野と考える。  その他(利用するプロトコルなど)で対応 #  HTTP/2に対応する #   HTTP/2に対応すると、サイトの高速化を図ることが出来る。 CDNを採用してHTTP/2に対応したい。  普及が進む「HTTP/2」の仕組みとメリットとは  gzip圧縮での配信 #   gzip圧縮してコンテンツを配信する  プログラミングで対応する事 #  非同期 #   外部API(決済、検索等)を呼び出した際に同期処理だと先方の速度によってはこちらの処理が待ち状態となり、サーバー負荷が不要に上がることがある。 非同期にすることによって、待ち状態や待ち行列を減らすことが出来る。 例としてAmazonの決済は、注文処理とは別になっており、非同期に行われる。決済代行業者などが提供するAPIが同時接続数の制限があることからこのような非同期を選択したと思われる。 その他の例だと、外部の検索やレコメンドサービスを利用した際に、そちらのサーバーからの戻り時間を待ってHTMLをレンダリングするとレスポンスが悪くなり、サーバーに待ち行列が発生するため、JavaScriptを使って、非同期に取得してHTMLレンダリングするという手法がある。  非同期(クライアントサイド) #   商品一覧における画像の遅延ロード。商品一覧に一度に商品数を表示しすぎると当然サーバーに多量のリクエストが飛ぶ。これは一覧においてページスクロールで読み込まれる直前に画像を読み込む「遅延ロード」と言われる技術で対応する事が出来る。 Googleの検索ボットに対して無効ではという議論もあったが現在は対処済みというのが一般認識になっている。 Search Consoleで動作を確認すると良い。  データの大量出力 #   全件出力が与えるシステム負荷は非常に大きい。外部と連携する場合は、可能な限り差分を検討したい。  知識の仕入れ方 #   アーキテクチャで対応することは既にソフトウェアデザインパターンとして、公開されている。 Microsoftが提供する Azure アーキテクチャ センターには、利用しているクラウドを問わないノウハウが体系化されているので、是非一読されたい。 特に パフォーマンスとスケーラビリティのパターンは、ECサイトのアーキテクチャにとって参考になる知見が多い。  体制 #   計測(運用)と対策・チューニング(開発)のチーム連携が密な方がよい。同一チームが理想である。  終わりに #   システム負荷対策は比較的日進月歩領域なので、注意してトレンドを追いたい。  "});index.add({'id':3,'href':'/systemsecurity/','title':"セキュリティ対策",'section':"自社ECの仕様を学ぼう",'content':"セキュリティ対策 #   システムで対応する事(セキュアなインフラ、セキュアなプログラミング)と運用で対応することに分かれる。 運用で対応する事には、PCI DSS のようなカード情報を扱う企業の条件についてふれる。 その他のトピックとして「カード情報の非保持、非通過」というトレンドについても触れる。 他に利用している外部サービス(特にクラウド)のアカウントを厳重に管理していく必要がある。  セキュアなプログラミングで対応する #   下記については、利用しているECサイトでどのような対策がされているか、網羅して頂きたい。 把握する方法としては、そもそも利用しているテクノロジーで防がれているもの、利用しているインフラで防がれているもの、 個別に対応を入れることによって防がれているものがある。 また攻撃手法は年々色々な方法が増えているので、定期的にキャッチアップしていきたい。 IPAの「 安全なウェブサイトの作り方」は必読。  上記抜粋になるが、主要な点を列挙する #    SQL インジェクション\n  クロスサイト・スクリプティング\n  CSRF（クロスサイト・リクエスト・フォージェリ）\n  セッション管理の不備\n  OS コマンド・インジェクション\n  パス名パラメータの未チェック／ディレクトリ・トラバーサル\n  HTTP ヘッダ・インジェクション\n  メールヘッダ・インジェクション\n  クリックジャッキング\n  バッファオーバーフロー\n  アクセス制御や認可制御の欠落\n  ウェブサイトの安全性向上のための取り組み\n  ウェブサーバに関する対策\n  DNS に関する対策\n  ネットワーク盗聴への対策\n  フィッシング詐欺を助長しないための対策\n  パスワードに関する対策\n  WAF によるウェブアプリケーションの保護\n  アプリケーションを構築するフレームワークで対応すべきこと #    下記の攻撃手法は、アプリケーションを構築するフレームワークで対応されていることが望ましい。\n  プログラミングで一行一行対応すると、人的なミスで脆弱性を内包してしまう可能性がある。\n  フレームワーク上できない場合は、該当箇所の重点的なレビューが必要になる。\n  フレームワークで対応すべきという観点では、昨年話題になった何件かの情報漏洩はApache Struts2 のフレームワーク、そのアップデート不足に起因するものがあった。フレームワークとして、そもそも攻撃手法を封じているものを使うほうが安全性が高い。\n  古いソフト、古いパッケージやOSS、プラグインを利用したままで、アップデートしていないケースで発生しているケースが多い。\n  EC-CUBEやWordPressはプラグインを含めて、この脆弱性が豊富で常に最新へのアップデートが必要。\n  イントラネットは外部侵入できなくなっているので、アップデートは不要という担当者もいるかもしれないが、昨今ではそのような考え方は企業のリスクを高めるものである。利用している環境のアップデートは本日では義務といえる。\n  SQLインジェクション #   SQLインジェクションについてはURLに含まれるパラメーターを通じて、不正なSQL(データベースへのアクセスを)を行うことを可能としてしまう。 脆弱性があるシステムだと、URLに　https://ec.com/login?1=1 などのパラメータを投入すると、不正な情報が見えたり、他人でログインできたりする。  クロスサイトスクリプティング #   URLや投稿内容にJavaScriptを埋め込み、不正な情報通信や不正な挙動を発生させる。 脆弱性があるシステムだと悪意のあるユーザーが入力したJavaScriptが動作することによってサイトの情報が不正に変わったり、不正なサイトに飛ばされたり、Cookieを盗まれ、ログインされてしまう等が発生する。 システムからHTMLを出力する際に内容を無害化することにより防ぐことが出来る。  アプリケーションを構築するインフラで対応すべきこと #  Cookieにsecure属性を付与し、HTTPでCookieが通信されないようにする #   重要なCookieはHTTPSのみでCookieが送信されるようにSecure属性をつける。 HTTPで送信することによって、セッションIDなど重要な情報が漏洩する可能性があるのでHTTPSでのみ通信する。  CookieにHttpOnly属性を加え、 TRACE メソッドを無効化する。 #   HttpOnlyが設定されたCookieは、HTML内のスクリプトからのアクセスが禁止されます。ウェブサイトにクロスサイト・スクリプティングの脆弱性が存在する場合等で、Cookieを盗まれるのを防ぐことが出来る。  カード情報の非保持、非通過 #   カード情報を非保持、自社EC上のサーバーを非通過とすることが2018年5月より厳格に求められている。 もしくは、 PCI DSSに準拠することが求められる。(後述)  PCI DSS の遵守要件を確認する #   遵守要件自体は参考になるものなので、一読する事を推奨する。   アカウント管理 #   クラウドのアカウント管理は多要素認証を利用する。 ECサイトの管理画面などはIP制限や、証明書による制御を検討する。  "});index.add({'id':4,'href':'/promotion/','title':"プロモーション",'section':"自社ECの仕様を学ぼう",'content':"プロモーション #  リリース後売り上げを伸ばすためにやること。 本稿は、現在書き途中です。また、項目が多岐にわたるために、今後分割する予定です。\n 売上を倍増するには #  分析 #   指標を取る(売上、カテゴリ、客層、PV、CVR)を取得する サーチコンソールなどを通して、SEO分析を行う。(サイト名で探したのか、商品名で探したのか) 購買分析(ニッチなプロダクトが多い＝値段ではなく手段として買うという仮説検証) ヒートマップを利用した定量的なUX分析  計画 #   新規サイトの場合、ほぼ認知がないに帰結するので、認知を得る方法を計画する どのカテゴリをどのような顧客にどのくらい売りたいのか計画する  仮説構築 #   買い方＝カテゴリ別にどのような顧客がどう買うのかシナリオを仮説検証する 得意なカテゴリ別のシナリオにシナリオを仮説検証する。(こういう時に、、こういう買い方をするのではないか) ユーザーはどのようにサイトに訪れるのか、「サイト名で探す場合」、「商品名で探す場合」など仮説に基づき導線を強化する ヘビーユーザーではないライトユーザー層の購入シナリオを調査する セット購入の導線強化やセット購入の割引を導入などを検討する 単品購入より複数購入(まとめてカートに、あわせて購入)する導線を検討する 定期購入に適した購入シナリオがあるか(消耗品など)、検討する 自社ブランドがどのように顧客に伝わっているのか調査し、伝えたい像につなげていく カタログの活かし方を検討する  UI上のテクニック #   サイト全取扱カテゴリが見渡せるようなものがあると常に一定のPV、コンバージョンが出やすい。カテゴリ一覧（全て）を見えるようにする。 親カテゴリに付随する子カテゴリの表示をわかりやすくする。 取扱メーカ一覧等カテゴリ以外の一覧もあるとよい。 急いでいるケースが多い＝日付、納期、問い合わせ先の表示徹底 自社ブランドの商品説明充実(動画) 店頭での商品知識をオンラインにどの程度持っていけるか ブログを商品と連携しやすくする シリーズを管理するなど商品情報を体系立てる(もしくはタグで管理など) 初回向け販促(ハードルを下げる通知＝初回ユーザーへのクーポンをポップアップなど) WEBへの送客  検索機能の強化 #   検索サービスの強化(外部サービスや、クラウドのAI機能を使う) 特定カテゴリ強化、セット商品、初心者向け、ニッチ特集の強化、おしゃれを軸とした商品 型番・品番に対するSEO強化、セミプロ向けの情報(１年に一度とか)  メール #   メルマガ かご落ちメール フォローメール  社内体制の強化 #   商品作成力の強化(外部のパートナー企業やバイトを活用してもよい) コンテンツ作成力の強化 チャット対応 広告管理 成果指標の変更(店舗受取となって店舗に売り上げがついた場合もEC関与売上高として考慮する)  顧客とのコミュニケーションを良くする #   アクティブな顧客とのコミュニケーションチャネル＝メール、SNS、LINE 休眠顧客とのコミュニケーション方法 実店舗との連携シナリオを突き詰める 常連とのコミュニケーション強化 リピーターの分析 会員登録促進(登録クーポン) 休眠顧客や認知していない顧客とのコミュニケーション方法  他社参考例や事業モデルの転換 #   工具店であれば、工具のレンタルサービスなどサービス化の検討 中古品の取り扱い  "});index.add({'id':5,'href':'/unauthorizeduse/','title':"不正利用対策",'section':"自社ECの仕様を学ぼう",'content':"不正利用対策 #   クレジットカードの不正利用 #   犯罪者は他人のクレジットカードを不正に入手して商品購入に利用する。 特徴として、外国人の名称、配送先を私書箱や転送サービスに指定している。 加盟店側(ECサイト側)は、不正利用の場合、クレジットカード会社から売り上げの支払いを受けることが出来ず、加盟店側は大きな損をする。 3Dセキュアを導入すれば、3Dセキュアの仕組み上不正利用の可能性は減り加盟店側がチャージバックを請求されることも減るが、確実にカートの離脱率が上がる傾向がある。 3Dセキュア採用時に加盟店様負担の有無についての確認方法＝管理画面にログイン　＞　取引の確認・変更　＞　決済状況の確認から、決済を確認します。 3DS認証状況欄が「本人認証対応/OK」もしくは「本人認証対応/未認証」となっていれば、 チャージバックが加盟店負担となることはありません。  後払いの不正利用 #   犯罪者は後払いサービスを他人の氏名住所で利用し購入する。 与信後に、配達業者にアクセスし、商品を私書箱や海外転送先に転送する。 与信を後払い側が行っているので、加盟店が不正利用額を請求されることはない。 配送業者から転送する際の認証を強化する対策しかない。  "});index.add({'id':6,'href':'/wms/','title':"倉庫(WMS)連携",'section':"自社ECの仕様を学ぼう",'content':"倉庫(WMS)連携 #  WMSとの連携について、よくある連携を記載する。\n 商品連携 #  商品情報の連携を行う。\n 向き＝一般的に多いのは基幹→EC→WMS。 EC側とWMS側で共通のコードで商品を識別する必要があるので、JAN、品番、SKU等を使ってコードを一致させる。  在庫連携 #  WMSで管理している在庫情報をECに連携する。\n 向き＝WMS→EC。 WMSの増減を元に在庫の更新を行う。 絶対値と相対値で更新する方法がある。どちらが良いかは運用や仕組みに合わせる。 WMSとECで在庫の値がズレることが稀にあるので、同期方法を検討しておく。 特定のタイミングから連携できなかった場合のレスキュー方法を検討しておく。WMSを全出力して、それをECに反映するルートを作るなど。 入出荷による在庫増減だけでなく、不良品の発生や定期的に実施する棚卸による在庫増減も考慮しておく。  受注連携 #  ECで受注したデータをWMSに連携する。連携形式は多様なので、以下それぞれ検討する。\n 受注情報をWMSに連携し、出荷時に利用する。 向き＝一般的に多いのはEC→WMS。 EC側とWMS側で共通の受注番号で商品を識別する必要がある。  受注ステータス連携 #  出荷指示 #  商品出荷指示の際、受注ステータスを出荷指示に更新\n 向き＝EC→WMS。  出荷済み #   向き＝WMS→EC。 送り状伝票番号をWMSからECに連携する。  受注キャンセル、返品 #   向き＝WMS→EC。 キャンセルになった注文番号をWMSからECに連携する。 在庫についても戻す場合は、WMS側で在庫を戻し、上述の「在庫連携」でECに連携する。 EC側は「受注キャンセル」のステータス情報をもとに決済情報のキャンセルなどを行う。  備考(セット商品の考慮) #  セット商品の考慮\n 商品A(在庫100)　商品B(在庫50) 、セット商品C(商品A＋商品B＝つまり在庫は50) 商品Bが単体で売れた場合、商品BとCの在庫を一つずつ減らす必要がある。  "});index.add({'id':7,'href':'/orderstatus/','title':"受注ステータス",'section':"自社ECの仕様を学ぼう",'content':"受注ステータス #  顧客が商品を購入した後に入金確認や在庫の引当、倉庫に出荷指示し、配送業者が顧客に商品が届け、売上計上されるまでの一連の受注業務フローを受注ステータスフローと呼ぶ。ECにおける主要な「業務」や「自社独自の業務」が発生するフローとなる。 顧客が注文した内容は、ステータスが「1.受注」「2.未引当」「3.中途引当」「4.引当済」「5.出荷指示済」「6.出荷済」「7.着荷済」「8.計上済」と遷移していく形となる。 また、このステータスに応じて、入金を確認したり、決済を確定させたり、配送会社における送り状の番号を送ったり、ポイントを付与したり「業務」が発生していく。\nこの「業務」は業態や業種によって、EC事業の体制や作業者の割り当てによって異なる。 一般的な例をもとに、あるべき業務フローを検討するのが良い。\n一般的でシンプルなフローをベースに紹介する。\n 1.受注 #  受注時の与信 #  受注時に自動で行われる業務が中心となっている。\n クレジットカードのオーソリゼーション(この決済に関する事前確認)。 後払いのリアルタイム与信(この後払い決済を受付て良いか確認)。  ユーザーキャンセル #  受注後、「引当済」までにユーザーが注文をキャンセルするケースがあるので、仕様を考慮する必要がある。\n 注文をそもそもユーザーがキャンセルできるのか。 どこからキャンセルできるのか(自社ECの購入履歴画面からか、コールセンターに電話か)。 キャンセルできるとすればいつまでなのか(在庫引当前までなど)。  2.未引当 #  注文確認 #  人力および自動で、注文を受け付けて問題ないかを確認する。\n 備考にお客様が入力した情報の確認。 納期や配送に関する質問や要望、例えばラッピングに関する特殊な要望などが記載されている。 離島や特定住所の場合は、そもそも送付して問題ないか、送料の再計算が必要かなどを調整する必要がある。 ブラックリストにあたるユーザーからの注文の場合は、内容を確認する場合がある。 その他、よくある商品間違いや、サイズ間違いや、業務特性によって顧客に確認すべきことのやり取り。 上記いずれにも当たらない問題がない注文の場合は、自動で次のステータスに移動するなども可能である。  注文分割 #  受注後に注文を分割する。例えばA,B,Cの３点商品を購入していて、Cの出荷が１週間遅れる場合などは、注文をA、BのものとCのものに分割する。\n 配送日が異なる場合は、決済タイミング(出荷時の場合が多い)を分けるためにこのような処理を行う。 決済に関しては、決済事業者側にクレジットカード使用に関するトークン情報が保持されているため、決済を分割した注文数分行うことが可能である。  注文変更 #  注文変更の場合は、以下のような仕様を検討する。\n  注文をそもそもユーザーが変更できるのか、変更に合わせて決済方法や金額の修正、付与ポイントの修正、など手間が多く発生するため、これらの反映が自動化されていないような場合は、変更を受け付けず、キャンセル後再注文してもらうような手法をとる場合もある。\n  どこから注文変更できるのか(自社ECの購入履歴画面からか、コールセンターに電話か)。\n  注文変更できるとすればいつまでなのか(在庫引当前、出荷指示前までなど)。\n  入金確認 #  入金確認は、その方法によって連携や確認方法が異なる。 自動化することによって、業務効率を上げることが可能。\n入金確認(クレジットカード) #   利用されたクレジットカード情報、利用者情報が問題ないか確認する。 これまで不正に利用されていないかなど、外部サービスを利用して確認することもある。  入金確認(銀行振込) #   銀行振込は銀行に入金があったかを確認する必要がある 仮想口座を使うと、入金と口座が１：１で紐づくので、API経由などで自動で入金処理することが可能。 仮想口座の場合は、番号が使いまわしとなっている。  入金確認(後払い) #   後払いサービスに該当注文を連携して与信が下りるかどうか確認する 確認は、カート時点からリアルタイム与信を行うようなことも可能。  入金確認(Amazonペイメント) #   主なメリットとして、Amazonに登録されている住所を利用する場合、保証がある。 より詳細なAmazonペイメントの情報については後述する。  発注 #  発注が必要な場合は、発注処理を行う。発注をEDIもしくはFAXなどで自動連係することも多い。 メーカーに発注して、メーカーから直送するようなケースも存在するし、メーカーからの商品を一度倉庫に集めて配送するケースも存在する。発注する際にも注文をある程度まとめてから発注するものと随時メーカーに送る方法などがある。\n3.中途引当 #  何らかの理由で在庫が引当できなかったケースをまとめたステータスとなる。 在庫の調整であったり、顧客との調整(納期の変更、注文のキャンセルなど)を行うことになる。\n4.引当済 #  ECサイトで物が売れたからといって、直接商品が確保され、そのまま配送に回されるわけではない。 商品は実際には、倉庫の棚にある。注文データを倉庫に渡すことによって出荷可能な商品を確保し、 注文(お客様、配送先)と紐づけ、出荷指示につなげる必要がある。規模が大きくなると倉庫も複数になるので、どの倉庫で引当てて、どの配送会社で送るかなど業務の規模が複雑になる傾向がある。\n5.出荷指示済 #  配送分割 #  送付元の拠点が異なる場合や、送付タイミングが異なる場合に\n6.出荷済 #  売上確定 #  決済事業者のAPIをたたくなどして、売上の確定を行う。\n後払いサービス連携 #  後払いサービスに出荷した旨を連携する。後払いサービスから、配送先に対して、振込用の伝票(ハガキ)が送られることになる。\n出荷通知 #  顧客へ出荷した旨をメールなどで通知する。配送会社と連携していれば、「配送状況確認(後述)」に必要な送り状番号(荷物番号)も併せて通知する。\n配送状況確認 #  クロネコヤマトや佐川急便では、配送状況の確認を行うWEBサービスを用意している。 出荷通知時に採番した伝票番号、送り状番号を使って問い合わせることが可能。\nヤマト\thttp://jizen.kuronekoyamato.co.jp/jizen/servlet/crjz.b.NQ0010?id=伝票番号 佐川\thttp://k2k.sagawa-exp.co.jp/p/web/okurijosearch.do?okurijoNo=送り状番号\n7.着荷済 #  着荷通知 #  配送会社のAPIから着荷情報を受け取る。 計上を起算する情報になるなど。 ただし配送会社のミスオペレーションが発生することもあり、リカバリ方法の検討は必要。\n出荷後の返品オペレーション #  以下のような仕様を検討する。\n 顧客への返金処理。 返品された商品をどうするか、在庫として戻すか  8.計上済 #  経理システムへの連携 #   売上が確定したデータを経理システムに連携する。  ポイント付与 #   出荷後すぐ、もしくはN日後にポイントを付与する。  "});index.add({'id':8,'href':'/product/','title':"商品",'section':"自社ECの仕様を学ぼう",'content':"商品 #  基本仕様 #   在庫、取り寄せ、予約、受注生産、定期の違いで購入フローが異なる #   在庫商品＝自社倉庫(WMS)から在庫を引当てる。 取り寄せ商品＝在庫を管理しているかはあるが、メーカーや卸に発注する形態をとる。 予約商品＝発売日に発送する。決済タイミングは業務要件によって購入時もしくは、引き当て時など異なる。 受注生産商品＝受注時はカード情報を預かり、入荷情報をもとに決済し、商品を発送していく。 定期商品＝カード情報を預かり、N日単位もしくは毎月N日に定期的に決済し、商品を発送する。  SKU(Stock Keeping Unit) #  商品の在庫管理単位。アパレルだと一般的に品番、カラー、サイズ別に在庫を管理する事になる。 業態によって管理方法や複雑度が異なる。 解決策として基本ー中間ー末端のような三層構造にして管理することも考えられる。\n   品番 カラー サイズ 在庫数     nk17-880553 ブラック×ホワイト 26.0cm 7   nk17-880553 ブラック×ホワイト 26.5cm 8   nk17-880553 ブラック×ホワイト 27.0cm 9   nk17-880553 ブルー 26.0cm 6   nk17-880553 ブルー 26.5cm 8   nk17-880553 ブルー 27.0cm 10   ※在庫はEC在庫以外に店舗別在庫もあり、どう仕様を表現するか考える。       重要な仕様 #   商品カテゴリ 商品タグ プレゼント商品(カートに同梱するような形をとるか、配送時に倉庫側で追加するか) セット商品(商品AとBをセット商品Cとした場合の在庫の考え方をどうするか)  デジタルコンテンツ #   在庫無制限。 即売上確定。 閲覧権限を別途管理しなくてはいけない。  外部連携 #   商品は基幹システムと連携するか、基幹からの一方通行なのか。 在庫はECのみでの管理か、物流倉庫と連携するか 商品データの連携用フォーマットはどうするか※CSVなどで外部システムからデータをもらうのが一般的 連携用フォーマットには、コントロールカラム(新規修正削除をコントロールするカラム)が必要 連携用フォーマットは横にカラムが伸びがちなので、必要最低限なものと、付加情報で分けられるとよい。  商品項目例 #  商品の項目例を記載する。\n商品項目例(よくあるケース) #   商品番号\t品番 JAN(国際標準はGTIN-13・EAN-13、インハウスJAN) 商品名 商品名(カナ) カテゴリ(N件) キャプション 販売ステータス 定価価格\t定価(内税、外税) 販売価格\t実際の販売価格(内税、外税) セール価格\tセール時の販売価格(内税、外税) 消費税　消費税額を別途管理する場合 送料区分\t共通の送料、個別送料有、送料無料 個別送料\t予め指定した送料以外に指定する場合の値、直接金額を入力する 代引料(システムで一括が一般的) ギフト対応(対応する、しない) 商品説明文\t=HTML、平文 商品画像URL、説明文ALT(N件) 掲載期間指定＝掲載可能な期間 販売期間指定＝購入可能な期間※予約商品の場合は、予約受付期間 予約商品発売日 注文受付数\t商品カートに入れられる数を指定する値。1なら一回の注文で1個しかカートに入れられない。 在庫タイプ＝JANが一つしかないケース、SKU別に在庫を管理するケース 在庫数 検索キーワード(表示しないが検索にかかるようにする) メタ説明文 翌日配達可否 在庫切れ時の注文受付可否(受け付ける、受け付けない) 納期区分(在庫ありの場合) 納期区分(在庫なしの場合) 配送方法区分(1：宅配便のみ　2：宅配便、ネコポス　3：宅配便、ネコポス、EMS　4：宅配便、EMS)  商品項目例(オプション) #   原価 仕入れ価格 販売単位記号(個、本、冊)  "});index.add({'id':9,'href':'/stock/','title':"在庫",'section':"自社ECの仕様を学ぼう",'content':"在庫 #  在庫について自社EC仕様にどのようなものがあるか記載する。\n在庫の考え方 #  在庫には多様な考え方があるので、それぞれについて理解する。\n基幹在庫 #  基幹システム、もしくはWMS(倉庫)で管理している在庫。実際倉庫の棚にある在庫。\n販売可能在庫 #  自社ECに割り当てられた販売可能な在庫で論理的な値。販売可能数を基幹在庫と同数にすると、モールや店舗など他で売れた場合に売り越してしまうリスクがあるため、基幹在庫と同じ数を割り当てるケースは少ない。基幹在庫の90％など一定の値を販売可能数とする。残りの10％を予備在庫数として持つことも可能。\n店舗在庫 #  店舗にある在庫も含めて販売するケースが一般的になってきている。 自社ECで対応する方法としては、１つの商品に対する在庫を倉庫A、店舗B、店舗C、店舗D…のような形でデータを持つか、 もしくは、販売可能数としては合計した在庫数を扱い、店舗受取時に上記のような店舗別の在庫数条件を考慮するような形も可能である。\n"});index.add({'id':10,'href':'/federation/','title':"基幹連携",'section':"自社ECの仕様を学ぼう",'content':"基幹連携 #  基幹システムと何を連携するか？ECだとあまり種類は多くなく、「売上情報」「顧客情報」「商品情報」が主な連携内容となる。\n売上情報(受注情報) #  売上が確定した受注情報を経理システムに渡すなど。経理システムに応じたフォーマットになりがち。\n 向き＝EC→基幹。  顧客情報 #  一元管理されている顧客情報を他方に送る。他方に送った場合は、情報の二重管理になってしまうので、 可能であれば、IdP(Identity Provider)を構築して、情報自体は一元管理し、OAuth等の認証経由で他方の情報を利用するような形がセキュリティ的な観点からも望ましい。\n 向き＝EC⇔基幹。  商品情報 #  基幹側が商品情報のエントリーになる場合、基幹側の商品情報をEC側に送る。基幹側では画像情報など画面表示するための情報を持っていないことが多い。\n 向き＝EC←基幹。  "});index.add({'id':11,'href':'/payment/','title':"支払方法",'section':"自社ECの仕様を学ぼう",'content':"支払方法 #  支払い方法は年々多様化が進んでいる。ショッピングする顧客にとっては、自分に合った便利な支払方法が増えるわけだが、バックオフィスにとっては入金確認業務や支払金額変更時の業務が増えるので、バックオフィスの業務を以下に減らすことが出来るかが重要になる。\nA.クレジットカード #   クレジットカード決済を提供する決済事業者は複数社あり、決済事業者の選択は、多くの場合料率(注文金額に対する手数料)で決まることが多い。それ以外の要素だと機能的なもので決まることもある。 よく聞く決済事業者としては(GMO、Veritrans、SoftBankPayment、Paygent、BlueGate)などがある。  PCIDSS認証と非通過対応 #   クレカ登録については2018年3月より、PCI DSS を保持していないデータセンターでのクレカ情報保持が禁じられており、PCI DSS の認証を受けるか、自社ECサーバー上でクレジットカードを通過させない非通過対応が必要となる。 PCI DSS(参考リンクあり) の認証を受けるには、内部運用業務のルール統一と大幅な見直し、高額なコストがかかることが一般的なので、クレジットカードの非通過対応を行う方が一般的である。 非通過対応には２種類あり、APIを利用したトークン型の決済を利用するか、外部サイトに遷移する対タイプの決済を利用する。  クレジットカードの不正利用 #   クレジットカードの不正利用も増えており、ECサイト運営者を悩ませている。 クジレットカードの不正利用に関しては、加盟店(ECサイト運営側)が被害額を負担するケースが多い。 3Dセキュア形式を採用して、認証を強化することもできるが、カート離脱の原因となるケースが多く、あまり普及していない。  B.代引き決済 #   商品を渡した際に配達員がその代金を回収する方法。 代引き手数料が一般的には必要。  C.銀行振込 #   銀行振込は銀行に入金があったかを確認する必要がある。 口座に入金された情報をもとに、注文と目検で紐づける形が一般的。  仮想口座 #   仮想口座を使うと、入金と口座が１：１で紐づくので、API経由などで自動で入金処理することが可能。 仮想口座の場合は、番号が使いまわしとなっている。  D.後払い(NP、ニッセン、GMO、クロネコヤマト) #   後から配送先の住所に請求書が送られてきて、コンビニや銀行振込で支払う形になる。ZOZOTOWNだと「ツケ払い」と呼ばれる。 与信の方法としてリアルタイム与信(カートから後払いの業者にAPIで通信して与信を確認)と受注後にCSVにリスト抽出して事業者に確認する方法がある。 出荷時に売上情報を連携して、後払い業者に請求書を発行してもらう形となる。  E.キャリア決済 #   携帯のキャリアから決済する方法(月々の料金として請求される)。 クレカを持っていない層、少額課金に有効。 クレジットカードの決済事業者が提供するAPIを利用して、追加実装するケースが一般的。  F.Amazonペイ #   Amazonの支払い情報を利用して決済することが出来る。導入後10-20％のユーザーが利用するテナントも多く支払い方法として効果が高い。 同期型と非同期型があるが、同期型の方が実装がシンプルなためこちらの方が推奨されているようだ。 大きなメリットの一つとしては、配送先をAmazonのものから利用することによってマーケットプレイス保証が付く。  G.ペイジー #   税金の支払いなどで利用されている方法で、金額をセットした「納付番号」を発番し、そちらに振り込む形の形式となる。 カート時点での処理はなく、在庫引当時に「納付番号」を発行する。 顧客が納付番号をもとに銀行から納付すると通知が来るので、その情報を反映する。  H.LINEペイ #   クレジットカードの決済事業者が提供するAPIを利用して、追加実装するケースが一般的。  I.楽天ペイ #   クレジットカードの決済事業者が提供するAPIを利用して、追加実装するケースが一般的。  J.Paypal #   クレジットカードの決済事業者が提供するAPIを利用して、追加実装するケースが一般的。  K.Appleペイ #   クレジットカードの決済事業者が提供するAPIを利用して、追加実装するケースが一般的。  ワークフローが必要な決済 #   受注生産や予約商品などEC上で購入したとしても実際の決済確定タイミング発送時になる場合は、与信の情報を取っておく必要がある。クレジットカードの情報はシステム上保持せず、決済プロバイダー上に保存しておくのが一般的である。決済確定まで３か月空いてしまう予約商品など場合によっては期限が切れてしまうので、保存した与信情報を適宜更新する。  参考リンク集 #    PCI DSS  "});index.add({'id':12,'href':'/order/','title':"注文",'section':"自社ECの仕様を学ぼう",'content':"注文 #  カート注文(受注するまで)について #  カートで注文を確定するためにユーザーが行う作業(フロー)を記載する。 カートインのタイミングで料金の計算や配達日指定のルールなどが決めることもあり、行う処理は多い。\n ①会員情報があればログイン、なければ新規登録かゲスト購入の選択 ②商品と数量の確認 ③オプションの選択 ④支払い方法の選択 ⑤配送先や配送方法、配送日時の選択 ⑥送料の算出 ⑦キャンペーン(値引き、クーポン利用) ⑧ポイント利用 ⑨税額計算、合計計算 ⑩注文の確定  それぞれに多様な要件がある。\n ①会員(ログイン、新規登録、ゲスト購入） #   会員については以下を参照。  会員について 会員IDはどこで管理するか、自社ECか、それ以外のIdp(アイデンティティ・プロバイダ)か。 購入には会員登録が必須か、ゲスト購入も可能とするか。 ゲスト購入後に会員登録するような仕様を設けるかなどが検討事項として存在する。  ②商品と数量の確認 #   商品展開し、商品と数量の確認を行う。 販売可能数をチェックする。 付与キャンペーン(後述)を確認する 在庫チェックする 商品販売パターンをチェックする。 同じカートに同梱不可能な商品(同時購入不能な商品、例えば常温商品と冷凍商品、一般商品と予約商品)をチェックする。 税額を算出する。 小計を算出する。  ③オプションの選択 #  オプションについては様々な選択肢があるので、利用したケースを記載していく。\nオプション(ギフト梱包) #   ギフト梱包はECでは一般的となっている。有料のもの無料のもの。 ギフト梱包はすべての商品で有効か、特定商品では使えないなどがある。 ギフト梱包はクリスマスや父の日など特定の日付近にのみ有効なものも存在する。  オプション(裾上げ) #   裾上げ(Nセンチメートル)  オプション(建材EC例) #   荷受け担当者、出荷証明書有無、搬入制限  ④支払い方法の選択 #  支払い方法については別ページを参照。\n  支払い方法について  ⑤配送先や配送方法、配送日時の選択 #   配送先の新規設定もしくは登録済みの住所から選択する。  配送先 #   会員情報に配送先があればその情報を表示する。 その他の配送先情報がある場合は、その選択も可能。  配送方法 #   配送方法としては、業者(クロネコヤマト、佐川)があり、宅配便(サイズ別)、ネコポス、EMSなどがある。これらは送料に影響する。(後述) 配送日時は、業者や契約条件によって異なるので、それぞれの配達可能時間帯をマスタ情報として管理する。  店舗受取 #   店舗受取する場合は、受取店舗の選択を行う。  ⑥送料の算出 #   送料は、配送方法と配送先で異なる。 配送方法としては、業者(クロネコヤマト、佐川)があり、宅配便(サイズ別)、ネコポス、EMSの違いがある。 配送先別送料として、地域や都道府県や郵便番号別に異なるか、離島に対応しているかの違いがある。 送料がカートでの確定時に決められない場合、離島は通販基幹で注文を止め(特定の郵便番号で検知)、再計算し、顧客に提示する方法を取ることもある。家具などサイズの大きい商品を多く扱っていて配送料の金額が高い場合は、このような手法が効果的。  ⑦キャンペーン(値引き、クーポン利用)、ポイント利用 #  値引きにはいろいろな方法があるが、キャンペーンという考え方でまとめる。 値引きの種類には下記のようなものが該当し、商品カテゴリや商品単位で設定する。\n ボリュームディスカウント＝N点以上買うとM円引き。 定率引き、定額引き。 ポイント付与倍率の変更。 それぞれ、小数点以下をどうするか調整が必要。  クーポン #   クーポンは上記キャンペーンを発動させるためにクーポンコードを入れるというような利用形式が多い。 クーポンで値引きをするという考え方よりは、クーポンでキャンペーン(値引き)を発動するような仕様とする。  ⑧ポイント利用 #  ポイント付与と利用について決めるべき仕様は以下のような点がある。 経理上の処理、法的制限がないか確認する。\n ポイントをどこで管理するか。ポイントについてはEC単独で持つケース、店舗と共通にするためPOS側(基幹側)でポイントを持つこともある。 ポイントの利用用途は、利用ポイントは 1pt = 1円で、1pt から購入商品金額・送料の支払に使えるなど使い方を定義する必要がある。 ポイント利用ができない商品があるか検討する。 ポイントはいつ失効するか(１年後、最終購入から１年後、失効しない等)  ポイント付与 #   ポイントはいつ付与されるか(出荷時もしくは、返品がなくなる出荷２週間後などが多いかもしれない) 付与ポイントの算出方法に関して計算式を用意する。  ⑨税額計算 #  税額計算の特性についてまとめる。\n 税率の管理方法は期間的な管理が必要(いつからいつまでN％、いつからM％) 税額の具体的な計算式を用意する。  ⑩注文の確定 #  注文の確定の際にも行う処理は多い。\n 在庫の確認 クレジットカードのオーソリゼーション(同期で行うか非同期で行うか検討可能) NP後払いのリアルタイム与信  "});index.add({'id':13,'href':'/customer/','title':"顧客",'section':"自社ECの仕様を学ぼう",'content':"顧客 #  顧客で検討すべき仕様として、基本項目としてどのような情報を持つか、オプションとしてどのような情報を持つか、マイページの機能として何を設けるか、顧客情報を外部連携するときにどのような情報を使ってどのような情報を受けるかがある。 他にも、稼働後のコミュケーションチャンネルや、もし他のシステムから顧客情報を移行する際にどのような注意点があるか確認する。\n基本項目 #   会員登録、ゲスト購入 名前 名前(カナ) 生年月日 性別 住所 注意すべき顧客か(キャンセル常習犯など)  オプション #   通常のECで持たないような特殊な項目はあるか。 属性(どのカテゴリ、ブランド、など) ランク 累計購入金額、購入回数 サイズ  顧客の外部連携 #   POSの会員(店舗会員)との連携 CRMツールとの連携 メルマガ、DM FacebookやTwitterでのログイン  マイページの機能 #   お気に入り ウィッシュリスト メルマガ送付、セグメント抽出 店舗で利用するような会員証の出力  コミュニケーションチャネル #   LINE、LINEビジネスコネクトの場合 Twitter(Twitterでの告知が売り上げの大半という事業もある) Facebook メルマガ テレセールス  顧客の移行 #  顧客情報の移行を旧システムから新システムに行う場合は、フォーマットを中心に以下の項目を確認する。\n どの項目を移行するか、パスワードは移行しない、住所は移行しない等。 氏名の形式(氏と名の間にスペースを設けるなど)。 住所情報のフォーマットは新旧システムで一致するか。 性別の値。 パスワード移行をするかどうか、不可逆なパスワードは移行できないので注意する。  "});})();